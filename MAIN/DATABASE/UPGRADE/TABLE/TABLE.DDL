CREATE TABLE CSTB_APPROVAL_EMAIL_LOG
(
EMAIL_REF_NO INTEGER  , 
EMAIL_ID VARCHAR2(255) , 
IP_ADDRESS VARCHAR2(255) , 
MESSAGE VARCHAR2(4000)
)
/
ALTER TABLE CSTB_APPROVAL_EMAIL_LOG
ADD CONSTRAINT PK01_CSTB_APPROVAL_EMAIL_LOG PRIMARY KEY(EMAIL_REF_NO)
/
CREATE TABLE CSTB_APPROVAL_EMAIL_TXN
(
APPROVAL_REF_NO INTEGER  , 
KEY_ID VARCHAR2(255) , 
MAKER_DT_STAMP DATE , 
FUNCTION_ID VARCHAR2(8) , 
BRANCH_CODE VARCHAR2(3) , 
MAKER_ID VARCHAR2(12) , 
ASSIGNED_TO VARCHAR2(12) , 
SENT_EMAIL CHAR(1) , 
APPROVED CHAR(1) , 
APPROVED_REJECTED_DATE DATE , 
APPROVED_REJECTED_REMARKS VARCHAR2(255) , 
EMAIL_REF_NO INTEGER  , 
AUTH_STATUS CHAR(1) , 
INTIMATION_SEND CHAR(1) DEFAULT 'N' , 
MODULE_GROUP_ID VARCHAR2(6) , 
MODULE_CODE VARCHAR2(2) , 
MAKER_REMARK VARCHAR2(256)
)
/
ALTER TABLE CSTB_APPROVAL_EMAIL_TXN
ADD CONSTRAINT PK01_CSTB_APPROVAL_EMAIL_TXN PRIMARY KEY(APPROVAL_REF_NO)
/
CREATE TABLE CSTB_CMB_LOV_INFO
(
FUNCTION_ID VARCHAR2(32) , 
LOV_ID VARCHAR2(400) , 
EXTERNAL_LOV_ID VARCHAR2(400) , 
LOV_FUNCTION VARCHAR2(1000) , 
REDUCTION_LIST VARCHAR2(500) , 
BIND_LIST VARCHAR2(500) , 
NO_DATA_FRM_EXT_SYS_PREF VARCHAR2(1) , 
LOV_ID_OTHER VARCHAR2(400)
)
/
ALTER TABLE CSTB_CMB_LOV_INFO
ADD CONSTRAINT PK_CSTB_CMB_LOV_INFO PRIMARY KEY(FUNCTION_ID,LOV_ID)
/
CREATE TABLE CSTB_INT_LOV_INFO
(
SERVICE VARCHAR2(50) , 
OPERATION VARCHAR2(50) , 
LOV_ID VARCHAR2(400) , 
FUNCTION_ID VARCHAR2(32) , 
RECORD_STAT CHAR(1) , 
AUTH_STAT CHAR(1) , 
ONCE_AUTH CHAR(1) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE
)
/
ALTER TABLE CSTB_INT_LOV_INFO
ADD CONSTRAINT PK01_CSTB_INT_LOV_INFO PRIMARY KEY(SERVICE,OPERATION)
/

CREATE OR REPLACE SYNONYM  CSTBS_INT_LOV_INFO FOR CSTB_INT_LOV_INFO
/
CREATE TABLE CSTM_EXT_LOV_FID_INFO
(
KEY_ID VARCHAR2(40) , 
FUNCTION_ID VARCHAR2(8) , 
EXT_TYPE VARCHAR2(1) , 
EXTERNAL_SYSTEM VARCHAR2(50) , 
SERVICE VARCHAR2(50) , 
OPERATION VARCHAR2(40) , 
RECORD_STAT CHAR(1) , 
AUTH_STAT CHAR(1) , 
ONCE_AUTH CHAR(1) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE
)
/
ALTER TABLE CSTM_EXT_LOV_FID_INFO
ADD CONSTRAINT PK01_CSTM_EXT_LOV_FID_INFO PRIMARY KEY(KEY_ID,FUNCTION_ID,EXTERNAL_SYSTEM)
/

CREATE OR REPLACE SYNONYM  CSTMS_EXT_LOV_FID_INFO FOR CSTM_EXT_LOV_FID_INFO
/
CREATE TABLE IFTM_EXTSYS_PREFERENCES
(
BRANCH_CODE VARCHAR2(3) DEFAULT 'ALL' , 
EXTERNAL_SYSTEM VARCHAR2(50) , 
AMOUNTBLOCK_VALIDATION_REQD VARCHAR2(1) , 
OFFSET_REQD VARCHAR2(1) , 
OFFSET_NETTING VARCHAR2(1) , 
OFFSET_TXNCODE VARCHAR2(3) , 
OFFSET_AMOUNT_TAG VARCHAR2(35) , 
FORCE_POST VARCHAR2(1) , 
AUTOAUTH VARCHAR2(1) , 
MAKER_ID VARCHAR2(12) , 
CHECKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_DT_STAMP DATE , 
ONCE_AUTH VARCHAR2(1) , 
AUTH_STAT VARCHAR2(1) , 
RECORD_STAT VARCHAR2(1) , 
MOD_NO NUMBER(4) , 
EXTSYS_USERID VARCHAR2(50)
)
/
ALTER TABLE IFTM_EXTSYS_PREFERENCES
ADD CONSTRAINT PK_IFTM_EXTSYS_PREFERENCES PRIMARY KEY(BRANCH_CODE,EXTERNAL_SYSTEM)
/

CREATE OR REPLACE SYNONYM  IFTMS_EXTSYS_PREFERENCES FOR IFTM_EXTSYS_PREFERENCES
/
CREATE TABLE IFTM_INTEGRATION_DETAILS
(
BRANCH_CODE VARCHAR2(3) DEFAULT 'ALL' , 
EXTERNAL_SYSTEM VARCHAR2(50) , 
SERVICE_NAME VARCHAR2(100) , 
COMMUNICATION_CHANNEL VARCHAR2(15) , 
COMMUNICATION_MODE VARCHAR2(1) , 
COMMUNICATION_LAYER VARCHAR2(3) , 
WS_SERVICE_NAME VARCHAR2(250) , 
WS_PORT_NAME VARCHAR2(250) , 
WS_ENDPOINT_URL VARCHAR2(500) , 
WS_USER VARCHAR2(128) , 
WS_PWD VARCHAR2(128) , 
WS_XSL_FILE VARCHAR2(500) , 
CUSTOM_CLASSNAME VARCHAR2(255) , 
ATM_SERVER_IP VARCHAR2(50) , 
ATM_SERVER_PORT VARCHAR2(50) , 
MDB_QCF VARCHAR2(255) , 
MDB_OUT_QUEUE VARCHAR2(255) , 
MDB_RESP_IN_QUEUE VARCHAR2(255) , 
REST_IP VARCHAR2(50) , 
REST_PORT VARCHAR2(10) , 
REST_PATTERN VARCHAR2(50) , 
REST_CONTEXT VARCHAR2(50)
)
/
ALTER TABLE IFTM_INTEGRATION_DETAILS
ADD CONSTRAINT PK_IFTM_INTEGRATION_DETAILS PRIMARY KEY(BRANCH_CODE,EXTERNAL_SYSTEM,SERVICE_NAME)
/

CREATE OR REPLACE SYNONYM  IFTMS_INTEGRATION_DETAILS FOR IFTM_INTEGRATION_DETAILS
/
CREATE TABLE IFTM_INTEGRATION_MASTER
(
BRANCH_CODE VARCHAR2(3) DEFAULT 'ALL' , 
EXTERNAL_SYSTEM VARCHAR2(50) , 
MAKER_ID VARCHAR2(12) , 
CHECKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_DT_STAMP DATE , 
ONCE_AUTH VARCHAR2(1) , 
AUTH_STAT VARCHAR2(1) , 
RECORD_STAT VARCHAR2(1) , 
MOD_NO NUMBER(4)
)
/
ALTER TABLE IFTM_INTEGRATION_MASTER
ADD CONSTRAINT PK_IFTM_INTEGRATION_MASTER PRIMARY KEY(BRANCH_CODE,EXTERNAL_SYSTEM)
/

CREATE OR REPLACE SYNONYM  IFTMS_INTEGRATION_MASTER FOR IFTM_INTEGRATION_MASTER
/
CREATE TABLE STTM_CORE_EL_COLLAT
(
ID NUMBER(20) , 
LIAB_ID NUMBER(20) , 
COLLATERAL_CODE VARCHAR2(50) , 
COLLATERAL_DESCRIPTION VARCHAR2(2000) , 
COLLATERAL_CURRENCY VARCHAR2(3) , 
COLLATERAL_VALUE NUMBER(24,3) , 
LIMIT_CONTRIBUTION NUMBER(24,3) , 
HOST_CODE VARCHAR2(8) , 
SOURCE_SYSTEM VARCHAR2(35) , 
SOURCE_SYSTEM_LIAB_ID NUMBER(20) , 
START_DATE DATE , 
END_DATE DATE , 
TAKEN_OVER VARCHAR2(1) , 
INTEREST_RATE  NUMBER , 
AVAILABLE VARCHAR2(1) , 
BRANCH_CODE VARCHAR2(3) , 
LIAB_BRANCH VARCHAR2(3) , 
CUSTOMER_NO VARCHAR2(20) , 
COLLATERAL_TYPE VARCHAR2(1) , 
SOURCE_SYSTEM_COLLATERAL_CODE VARCHAR2(50) , 
RECORD_STAT VARCHAR2(1) , 
AUTH_STAT VARCHAR2(1) , 
ONCE_AUTH VARCHAR2(1) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(50) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(50) , 
CHECKER_DT_STAMP DATE
)
/

CREATE INDEX  UI01_STTM_CORE_EL_COLLAT
 ON STTM_CORE_EL_COLLAT
 (
LIAB_ID,COLLATERAL_CODE
)
/
ALTER TABLE STTM_CORE_EL_COLLAT
ADD CONSTRAINT C1_STTM_CORE_EL_COLLAT CHECK( "ID" IS NOT NULL)
/
ALTER TABLE STTM_CORE_EL_COLLAT
ADD CONSTRAINT PK01_STTM_CORE_EL_COLLAT PRIMARY KEY(ID)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_COLLAT FOR STTM_CORE_EL_COLLAT
/
CREATE TABLE STTM_CORE_EL_FACILITY
(
ID NUMBER(20) , 
LIAB_ID NUMBER(20) , 
LINE_CODE VARCHAR2(40) , 
LINE_SERIAL NUMBER(3) , 
HOST_CODE VARCHAR2(8) , 
SOURCE_SYSTEM VARCHAR2(35) , 
SOURCE_SYSTEM_LIAB_ID NUMBER(20) , 
MAIN_LINE_ID NUMBER(20) , 
LINE_CURRENCY VARCHAR2(12) , 
LINE_START_DATE DATE , 
LINE_EXPIRY_DATE DATE , 
AVAILABILITY_FLAG VARCHAR2(4) , 
BOOKING_DATE DATE , 
INTEREST_CALC_ACC VARCHAR2(80) , 
LMT_AMT_BASIS VARCHAR2(4) , 
INTEREST_REQD VARCHAR2(4) , 
LIMIT_AMOUNT NUMBER(24,3) , 
COLLATERAL_CONTRIBUTION NUMBER(24,3) , 
LIAB_BR VARCHAR2(12) , 
BRN VARCHAR2(12) , 
DESCRIPTION VARCHAR2(1020) , 
COMMITMENT_REF_NO VARCHAR2(200) , 
COMMITMENT_SETTL_BRN VARCHAR2(40) , 
COMMITMENT_SETTL_ACC VARCHAR2(200) , 
FACILITY_TYPE VARCHAR2(1) , 
PPC_REF_NO VARCHAR2(64) , 
PPC_PROJECT_ID VARCHAR2(60) , 
DSP_EFF_LINE_AMOUNT NUMBER(24,3) , 
BULK_PMT_REQD VARCHAR2(4) , 
SOURCE_SYSTEM_LINE_CODE VARCHAR2(40) , 
SOURCE_SYSTEM_LINE_SERIAL NUMBER(3) , 
UNADVISED VARCHAR2(4) DEFAULT 'N' , 
REVOLVING_LINE VARCHAR2(4) DEFAULT 'Y' , 
TRANSFER_AMOUNT NUMBER(24,3) DEFAULT 0 , 
BLOCK_AMOUNT NUMBER(24,3) DEFAULT 0 , 
RECORD_STAT VARCHAR2(4) , 
AUTH_STAT VARCHAR2(4) , 
ONCE_AUTH VARCHAR2(4) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(200) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(200) , 
CHECKER_DT_STAMP DATE
)
/

CREATE INDEX  UN01_STTM_CORE_EL_FACILITY
 ON STTM_CORE_EL_FACILITY
 (
LIAB_ID,LINE_CODE,LINE_SERIAL
)
/
ALTER TABLE STTM_CORE_EL_FACILITY
ADD CONSTRAINT PK01_STTM_CORE_EL_FACILITY PRIMARY KEY(ID)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_FACILITY FOR STTM_CORE_EL_FACILITY
/
CREATE TABLE STTM_CORE_EL_FACILITY_HIST
(
ID NUMBER(20) , 
HOST_CODE VARCHAR2(8) , 
SOURCE VARCHAR2(140) , 
SOURCE_LIAB_ID NUMBER(20) , 
SOURCE_LINE_CODE VARCHAR2(40) , 
SOURCE_LINE_SERIAL NUMBER(3) , 
LIAB_ID NUMBER(20) , 
LINE_CODE VARCHAR2(40) , 
LINE_SERIAL NUMBER(3) , 
MAIN_LINE_ID NUMBER(20) , 
LINE_CURRENCY VARCHAR2(12) , 
LINE_START_DATE DATE , 
LINE_EXPIRY_DATE DATE , 
AVAILABILITY_FLAG VARCHAR2(4) , 
BOOKING_DATE DATE , 
INTEREST_CALC_ACC VARCHAR2(80) , 
LMT_AMT_BASIS VARCHAR2(4) , 
TRANSFER_AMOUNT NUMBER(24,3) , 
INTEREST_REQD VARCHAR2(4) , 
LIMIT_AMOUNT NUMBER(24,3) , 
COLLATERAL_CONTRIBUTION NUMBER(24,3) , 
LIAB_BR VARCHAR2(12) , 
BRN VARCHAR2(12) , 
DESCRIPTION VARCHAR2(1020) , 
FACILITY_TYPE VARCHAR2(1) , 
DSP_EFF_LINE_AMOUNT NUMBER(24,3) , 
BULK_PMT_REQD VARCHAR2(4) , 
REVOLVING_LINE VARCHAR2(1) , 
UNADVISED VARCHAR2(1) , 
BLOCK_AMOUNT NUMBER(24,3) DEFAULT 0 , 
RECORD_STAT VARCHAR2(4) , 
AUTH_STAT VARCHAR2(4) , 
ONCE_AUTH VARCHAR2(4) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(200) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(200) , 
CHECKER_DT_STAMP DATE
)
/
ALTER TABLE STTM_CORE_EL_FACILITY_HIST
ADD CONSTRAINT PK01_STTM_CORE_EL_FACL_HIST PRIMARY KEY(ID,MOD_NO)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_FACILITY_HIST FOR STTM_CORE_EL_FACILITY_HIST
/
CREATE TABLE STTM_CORE_EL_LIAB
(
ID NUMBER(20) , 
LIAB_NO VARCHAR2(9) , 
LIAB_NAME VARCHAR2(255) , 
LIAB_BRANCH VARCHAR2(3) , 
LIAB_CCY VARCHAR2(3) , 
HOST_CODE VARCHAR2(8) , 
SOURCE_SYSTEM VARCHAR2(35) , 
SOURCE_SYSTEM_LIAB_NO VARCHAR2(9) , 
OVERALL_LIMIT NUMBER(24,3) , 
MAIN_LIAB_ID NUMBER(20) , 
REVISION_DATE DATE , 
CREDIT_RATING VARCHAR2(10) , 
RECORD_STAT VARCHAR2(1) , 
AUTH_STAT VARCHAR2(1) , 
MOD_NO NUMBER(4) , 
ONCE_AUTH VARCHAR2(1) , 
MAKER_ID VARCHAR2(50) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(50) , 
CHECKER_DT_STAMP DATE
)
/

CREATE INDEX  UI01_STTM_CORE_EL_LIAB
 ON STTM_CORE_EL_LIAB
 (
LIAB_NO
)
/
ALTER TABLE STTM_CORE_EL_LIAB
ADD CONSTRAINT PK01_STTM_CORE_EL_LIAB PRIMARY KEY(ID)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_LIAB FOR STTM_CORE_EL_LIAB
/
CREATE TABLE STTM_CORE_EL_LIAB_CUST
(
ID NUMBER(20) , 
BRANCH_CODE VARCHAR2(3) , 
CUSTOMER_NO VARCHAR2(20) , 
LIAB_ID NUMBER(20) , 
HOST_CODE VARCHAR2(8) , 
SOURCE_SYSTEM VARCHAR2(35) , 
SOURCE_SYSTEM_LIAB_ID NUMBER(20) , 
SOURCE_SYSTEM_CUSTOMER_NO VARCHAR2(20) , 
ONCE_AUTH CHAR(1) , 
RECORD_STAT CHAR(1) , 
AUTH_STAT CHAR(1) , 
MOD_NO NUMBER(4) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE
)
/

CREATE INDEX  UI01_STTM_CORE_EL_LIAB_CUST
 ON STTM_CORE_EL_LIAB_CUST
 (
CUSTOMER_NO,LIAB_ID
)
/
ALTER TABLE STTM_CORE_EL_LIAB_CUST
ADD CONSTRAINT PK01_STTM_CORE_EL_LIAB_CUST PRIMARY KEY(ID)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_LIAB_CUST FOR STTM_CORE_EL_LIAB_CUST
/
CREATE TABLE STTM_CORE_EL_POOL
(
ID NUMBER(20) , 
LIAB_ID NUMBER(20) , 
POOL_CODE VARCHAR2(20) , 
POOL_DESCRIPTION VARCHAR2(105) , 
POOL_CCY VARCHAR2(3) , 
POOL_AMOUNT  NUMBER , 
HOST_CODE VARCHAR2(8) , 
SOURCE_SYSTEM VARCHAR2(35) , 
SOURCE_SYSTEM_LIAB_ID NUMBER(20) , 
LIAB_BRANCH VARCHAR2(3) , 
SOURCE_SYSTEM_POOL_CODE VARCHAR2(20) , 
BRANCH_CODE VARCHAR2(3) , 
RECORD_STAT VARCHAR2(1) , 
AUTH_STAT VARCHAR2(1) , 
MOD_NO NUMBER(4) , 
ONCE_AUTH VARCHAR2(1) , 
MAKER_ID VARCHAR2(50) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(50) , 
CHECKER_DT_STAMP DATE
)
/

CREATE INDEX  UI01_STTM_CORE_EL_POOL
 ON STTM_CORE_EL_POOL
 (
LIAB_ID,POOL_CODE
)
/
ALTER TABLE STTM_CORE_EL_POOL
ADD CONSTRAINT PK01_STTM_CORE_EL_POOL PRIMARY KEY(ID)
/

CREATE OR REPLACE SYNONYM  STTMS_CORE_EL_POOL FOR STTM_CORE_EL_POOL
/
ALTER TABLE CSTB_LOV_INFO  ADD( LOV_TYPE VARCHAR2(1) DEFAULT 'I')
/
ALTER TABLE STTM_CORE_ACCOUNT  ADD( COUNTRY_CODE VARCHAR2(10))
/
ALTER TABLE STTM_CORE_ACCOUNT  MODIFY( CUST_AC_NAME VARCHAR2(105))
/
ALTER TABLE STTM_CORE_TRN_CODE  MODIFY( TRN_DESC VARCHAR2(105))
/

CREATE OR REPLACE SYNONYM  GITUS_UPLOAD_DETAIL FOR GITU_UPLOAD_DETAIL
/

CREATE OR REPLACE SYNONYM  STTMS_CUSTOM_DATES FOR STTM_DATES
/

CREATE OR REPLACE SYNONYM  GITUS_UPLOAD_MASTER FOR GITU_UPLOAD_MASTER
/
CREATE TABLE CFTM_FLOATING_RATE_CODE
(
RATE_CODE VARCHAR2(10) , 
DESCRIPTION VARCHAR2(105) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE , 
AUTH_STAT VARCHAR2(1) , 
RECORD_STAT VARCHAR2(1) , 
ONCE_AUTH VARCHAR2(1) , 
MOD_NO NUMBER(4)
)
/
ALTER TABLE CFTM_FLOATING_RATE_CODE
ADD CONSTRAINT PK01_CFTM_FLOATING_RATE_CODE PRIMARY KEY(RATE_CODE)
/

CREATE OR REPLACE SYNONYM  CFTMS_FLOATING_RATE_CODE FOR CFTM_FLOATING_RATE_CODE
/
CREATE TABLE CSTM_APPROOT_DEPENDENCIES
(
FUNCTION_ID VARCHAR2(35) , 
DEPENDENT_FUNCTION_ID VARCHAR2(35)
)
/
ALTER TABLE CSTM_APPROOT_DEPENDENCIES
ADD CONSTRAINT C1_CSTM_APPROOT_DEPENDENCIES CHECK( "DEPENDENT_FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_DEPENDENCIES
ADD CONSTRAINT C2_CSTM_APPROOT_DEPENDENCIES CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_DEPENDENCIES
ADD CONSTRAINT PK_APPROOT_DEPENDENCIES PRIMARY KEY(FUNCTION_ID,DEPENDENT_FUNCTION_ID)
/
CREATE TABLE CSTM_APPROOT_FUNCTIONS_MENU
(
FUNCTION_ID VARCHAR2(35) , 
MODIFIABLE VARCHAR2(1) , 
SUMMARY_FN_ID VARCHAR2(35)
)
/
ALTER TABLE CSTM_APPROOT_FUNCTIONS_MENU
ADD CONSTRAINT C1_CSTM_APPROOT_FUNCTIONS_MENU CHECK( "MODIFIABLE" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_FUNCTIONS_MENU
ADD CONSTRAINT C2_CSTM_APPROOT_FUNCTIONS_MENU CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_FUNCTIONS_MENU
ADD CONSTRAINT PK_APPROOT_FUNCTIONS_MENU PRIMARY KEY(FUNCTION_ID)
/
CREATE TABLE CSTM_APPROOT_OBJECTS
(
FUNCTION_ID VARCHAR2(35) , 
OBJECT_NAME VARCHAR2(128) , 
OBJECT_TYPE VARCHAR2(23) , 
SHARING VARCHAR2(18)
)
/
ALTER TABLE CSTM_APPROOT_OBJECTS
ADD CONSTRAINT C1_CSTM_APPROOT_OBJECTS CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_OBJECTS
ADD CONSTRAINT C2_CSTM_APPROOT_OBJECTS CHECK( "OBJECT_TYPE" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_OBJECTS
ADD CONSTRAINT C3_CSTM_APPROOT_OBJECTS CHECK( "OBJECT_NAME" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_OBJECTS
ADD CONSTRAINT C4_CSTM_APPROOT_OBJECTS CHECK( "SHARING" IS NOT NULL)
/
ALTER TABLE CSTM_APPROOT_OBJECTS
ADD CONSTRAINT PK_APPROOT_OBJECTS PRIMARY KEY(FUNCTION_ID,OBJECT_NAME,OBJECT_TYPE)
/
ALTER TABLE SMTB_MENU  ADD( APPROOT_FLG CHAR(1) DEFAULT 'N')
/
CREATE TABLE STTB_APPDYN_CALL
(
MODULE_CODE CHAR(2) , 
FUNCTION_ID VARCHAR2(20) , 
FUNCTION_TYPE VARCHAR2(20) , 
FUNCTION_PARAM VARCHAR2(20) , 
VERSION_NO VARCHAR2(20)
)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT C1_STTB_APPDYN_CALL CHECK( "FUNCTION_PARAM" IS NOT NULL)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT C2_STTB_APPDYN_CALL CHECK( "VERSION_NO" IS NOT NULL)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT C3_STTB_APPDYN_CALL CHECK( "MODULE_CODE" IS NOT NULL)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT C4_STTB_APPDYN_CALL CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT C5_STTB_APPDYN_CALL CHECK( "FUNCTION_TYPE" IS NOT NULL)
/
ALTER TABLE STTB_APPDYN_CALL
ADD CONSTRAINT PK_STTB_APPDYN_CALL PRIMARY KEY(FUNCTION_ID,FUNCTION_PARAM,FUNCTION_TYPE)
/
CREATE OR REPLACE SYNONYM  STTBS_APPDYN_CALL FOR STTB_APPDYN_CALL
/
CREATE TABLE STTB_DYNCALL_EXCEPTION
(
MODULE_CODE CHAR(2) , 
FUNCTION_ID VARCHAR2(20) , 
FUNCTION_PARAM VARCHAR2(20) , 
FUNCTION_TYPE VARCHAR2(20) , 
VERSION_NO VARCHAR2(20) , 
ERROR VARCHAR2(35)
)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C1_STTB_DYNCALL_EXCEPTION CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C2_STTB_DYNCALL_EXCEPTION CHECK( "FUNCTION_PARAM" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C3_STTB_DYNCALL_EXCEPTION CHECK( "FUNCTION_TYPE" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C4_STTB_DYNCALL_EXCEPTION CHECK( "VERSION_NO" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C5_STTB_DYNCALL_EXCEPTION CHECK( "ERROR" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT C6_STTB_DYNCALL_EXCEPTION CHECK( "MODULE_CODE" IS NOT NULL)
/
ALTER TABLE STTB_DYNCALL_EXCEPTION
ADD CONSTRAINT PK_STTB_DYNCALL_EXCEPTION PRIMARY KEY(FUNCTION_ID,FUNCTION_PARAM,FUNCTION_TYPE)
/
CREATE OR REPLACE SYNONYM  STTBS_DYNCALL_EXCEPTION FOR STTB_DYNCALL_EXCEPTION
/
CREATE TABLE STTB_PDBDYN_CALL
(
MODULE_CODE CHAR(2) , 
FUNCTION_ID VARCHAR2(20) , 
FUNCTION_TYPE VARCHAR2(20) , 
FUNCTION_PARAM VARCHAR2(20) , 
VERSION_NO VARCHAR2(20) , 
STATUS CHAR(1)
)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C1_STTB_PDBDYN_CALL CHECK( "MODULE_CODE" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C2_STTB_PDBDYN_CALL CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C3_STTB_PDBDYN_CALL CHECK( "FUNCTION_TYPE" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C4_STTB_PDBDYN_CALL CHECK( "FUNCTION_PARAM" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C5_STTB_PDBDYN_CALL CHECK( "VERSION_NO" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT C6_STTB_PDBDYN_CALL CHECK( "STATUS" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL
ADD CONSTRAINT PK_STTB_PDBDYN_CALL PRIMARY KEY(FUNCTION_ID,FUNCTION_PARAM,FUNCTION_TYPE)
/
CREATE OR REPLACE SYNONYM  STTBS_PDBDYN_CALL FOR STTB_PDBDYN_CALL
/
CREATE TABLE STTB_PDBDYN_CALL_LOG
(
MODULE_CODE CHAR(2) , 
FUNCTION_ID VARCHAR2(20) , 
FUNCTION_PARAM VARCHAR2(20) , 
FUNCTION_TYPE VARCHAR2(20) , 
VERSION_NO VARCHAR2(20) , 
STATUS CHAR(1)
)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C1_STTB_PDBDYN_CALL_LOG CHECK( "MODULE_CODE" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C2_STTB_PDBDYN_CALL_LOG CHECK( "FUNCTION_ID" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C3_STTB_PDBDYN_CALL_LOG CHECK( "FUNCTION_PARAM" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C4_STTB_PDBDYN_CALL_LOG CHECK( "FUNCTION_TYPE" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C5_STTB_PDBDYN_CALL_LOG CHECK( "VERSION_NO" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT C6_STTB_PDBDYN_CALL_LOG CHECK( "STATUS" IS NOT NULL)
/
ALTER TABLE STTB_PDBDYN_CALL_LOG
ADD CONSTRAINT PK_STTB_PDBDYN_CALL_LOG PRIMARY KEY(FUNCTION_ID,FUNCTION_PARAM,FUNCTION_TYPE)
/

CREATE OR REPLACE SYNONYM  STTBS_PDBDYN_CALL_LOG FOR STTB_PDBDYN_CALL_LOG
/
CREATE TABLE CSTM_APPROOT_MENU_MOVEDTOPDB
(
FUNCTION_ID VARCHAR2(35) , 
SUMMARY_FN_ID VARCHAR2(35)
)
/
ALTER TABLE CSTM_APPROOT_MENU_MOVEDTOPDB
ADD CONSTRAINT C1_CSTM_APPROOT_MENU_MOVEDTOPD CHECK( "FUNCTION_ID" IS NOT NULL)
/
DECLARE  
   CURSOR cr_rate_code IS
      SELECT DISTINCT rate_code
        FROM cftm_rate_code
	   WHERE record_stat = 'O'
	     AND once_auth = 'Y'
	   ORDER BY rate_code;
   TYPE ty_rate_code IS TABLE OF cftm_floating_rate_code%ROWTYPE INDEX BY BINARY_INTEGER;
   l_rate_code_rec cftm_rate_code%ROWTYPE;
   l_rate_code ty_rate_code;
   l_count      NUMBER := 0;
   e_bulk_errors_expt EXCEPTION; --To capture Bulk errors (Bulk Insert)
   PRAGMA EXCEPTION_INIT(e_bulk_errors_expt, -24381);

BEGIN
   
   FOR i IN cr_rate_code LOOP
       BEGIN
	      SELECT rate_descr, maker_id, maker_dt_stamp, checker_id , checker_dt_stamp
		    INTO l_rate_code_rec.rate_descr, l_rate_code_rec.maker_id, l_rate_code_rec.maker_dt_stamp, l_rate_code_rec.checker_id, l_rate_code_rec.checker_dt_stamp
			FROM cftm_rate_code
		   WHERE rate_code = i.rate_code
		     AND rownum = 1;
	   EXCEPTION
	      WHEN OTHERS THEN
		  dbms_output.put_line('Failed in selecting rate code details');
	   END;
       l_count := l_count + 1;
       l_rate_code(l_count).rate_code            := i.rate_code;
       l_rate_code(l_count).description          := l_rate_code_rec.rate_descr;
       l_rate_code(l_count).maker_id             := l_rate_code_rec.maker_id;
       l_rate_code(l_count).maker_dt_stamp       := l_rate_code_rec.maker_dt_stamp;
       l_rate_code(l_count).checker_id           := l_rate_code_rec.checker_id;
       l_rate_code(l_count).checker_dt_stamp     := l_rate_code_rec.checker_dt_stamp;
       l_rate_code(l_count).auth_stat            := 'A';
       l_rate_code(l_count).record_stat          := 'O';
       l_rate_code(l_count).once_auth            := 'Y';
       l_rate_code(l_count).mod_no               := 1; 
       dbms_output.put_line('l_rate_code(l_count).rate_code ::' || l_rate_code(l_count).rate_code);
   END LOOP;
   dbms_output.put_line('success in loop');
   BEGIN
    FORALL b IN l_rate_code.FIRST .. l_rate_code.LAST 
      INSERT INTO CFTM_FLOATING_RATE_CODE
      VALUES l_rate_code(b);
   EXCEPTION 
   WHEN OTHERS THEN
      RAISE e_bulk_errors_expt;
   END;  
   dbms_output.put_line('success in Bulk Insert'||SQL%ROWCOUNT);
   COMMIT;
EXCEPTION

  --  ============================================
  -- Handling BULK INSERT related exceptions
  -- ============================================
  WHEN e_bulk_errors_expt THEN
    ROLLBACK;
    -- Close open cursors, if any
    dbms_output.put_line('Failed in Bulk Insert');
    dbms_output.put_line('Number of Failures -' ||
                         SQL%BULK_EXCEPTIONS.COUNT);
    dbms_output.put_line('Process terminated due to error ::' || SQLERRM);
    FOR i IN 1 .. SQL%BULK_EXCEPTIONS.COUNT LOOP
      dbms_output.put_line('Error Index - ' || SQL%BULK_EXCEPTIONS(i)
                           .ERROR_INDEX);
      dbms_output.put_line('Error Code - ' || SQL%BULK_EXCEPTIONS(i)
                           .ERROR_CODE);
      dbms_output.put_line(SQL%BULK_EXCEPTIONS(i).ERROR_INDEX || ' ' || SQL%BULK_EXCEPTIONS(i)
                           .ERROR_CODE || ' ' || 
                           l_rate_code(SQL%BULK_EXCEPTIONS(i).ERROR_INDEX).rate_code);
    END LOOP;
  
  WHEN OTHERS THEN
    dbms_output.put_line('Process terminated due to error ::' || sqlerrm);
END;
/
CREATE TABLE CSTM_APPROOT_MENU_MOVEDTOPDB
(
FUNCTION_ID VARCHAR2(35) , 
SUMMARY_FN_ID VARCHAR2(35)
)
/
ALTER TABLE CSTM_APPROOT_MENU_MOVEDTOPDB
ADD CONSTRAINT C1_CSTM_APPROOT_MENU_MOVEDTOPD CHECK( "FUNCTION_ID" IS NOT NULL)
/
DELETE FROM gwtb_msg_out_log where msg_ref_no in (select a.msg_ref_no from (select msg_ref_no, count(*) cnt from gwtb_msg_out_log Group by msg_ref_no) a where cnt > 1) and process_status = 'E'
/
CREATE TABLE GWTB_MSG_OUT_LOG_TP AS SELECT * FROM GWTB_MSG_OUT_LOG
/
TRUNCATE TABLE GWTB_MSG_OUT_LOG
/
ALTER TABLE GWTB_MSG_OUT_LOG
ADD CONSTRAINT PK_GWTB_MSG_OUT_LOG PRIMARY KEY(MSG_REF_NO)
/
INSERT INTO GWTB_MSG_OUT_LOG select * from GWTB_MSG_OUT_LOG_TP
/
drop table GWTB_MSG_OUT_LOG_TP
/
CREATE INDEX  IDX_01_STTB_RECORD_LOG_VWCHG
 ON STTB_RECORD_LOG_VWCHG
 (
BRANCH_CODE
)
/
BEGIN
  EXECUTE IMMEDIATE 'CREATE TABLE ISTM_BIC_DIRECTORY_TMP AS (SELECT * FROM ISTM_BIC_DIRECTORY)';
  DBMS_OUTPUT.PUT_LINE('Table ISTM_BIC_DIRECTORY_TMP is created ---->');  
EXCEPTION 
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('Table is not created ---->');
END;
/
ALTER TABLE ISTM_BIC_DIRECTORY DROP CONSTRAINT PK01_ISTM_BIC_DIRECTORY
/
DROP TABLE ISTM_BIC_DIRECTORY
/
CREATE TABLE ISTM_BIC_DIRECTORY_GBL
(
BIC_CODE VARCHAR2(11) , 
BANK_NAME VARCHAR2(105) , 
MOD_NO NUMBER(4) , 
RECORD_STAT CHAR(1) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE , 
ONCE_AUTH CHAR(1) , 
AUTH_STAT CHAR(1) , 
BANK_ADDRESS1 VARCHAR2(35) , 
BANK_ADDRESS2 VARCHAR2(35) , 
BANK_ADDRESS3 VARCHAR2(90) , 
UPLOAD_FLAG CHAR(1) , 
UPLOAD_UPDATE CHAR(1) , 
GEN_MT103 VARCHAR2(1) , 
BLACKLISTED CHAR(1) , 
CUG_MEMBER VARCHAR2(1) DEFAULT 'N' , 
GEN_MT103P VARCHAR2(1) DEFAULT 'Y' , 
MULTI_CUST_TRANSFER CHAR(1) , 
MAX_SIZE NUMBER(38) , 
REMIT_MEMBER VARCHAR2(1) , 
SUB_TYPE_CODE VARCHAR2(4) , 
GEN_MT102P VARCHAR2(1) , 
GEN_MT101 VARCHAR2(1) , 
TRANSACTION_PER_MSG  NUMBER , 
ADB_MEMBER VARCHAR2(1) DEFAULT 'X' , 
BE_INDICATOR VARCHAR2(1) , 
BRANCH_INFO VARCHAR2(70) , 
POB_NUMBER VARCHAR2(35) , 
STREET_ADDR_1 VARCHAR2(35) , 
STREET_ADDR_2 VARCHAR2(35) , 
STREET_ADDR_3 VARCHAR2(35) , 
STREET_ADDR_4 VARCHAR2(35) , 
CITY VARCHAR2(35) , 
CPS VARCHAR2(90) , 
ZIP_CODE VARCHAR2(15) , 
ISO_COUNTRY_CODE VARCHAR2(2)
)
/
CREATE OR REPLACE SYNONYM  ISTMS_BIC_DIRECTORY_GBL FOR ISTM_BIC_DIRECTORY_GBL
/
ALTER TABLE ISTM_BIC_DIRECTORY_GBL
ADD CONSTRAINT PK01_ISTM_BIC_DIRECTORY_GBL PRIMARY KEY(BIC_CODE)
/
CREATE TABLE ISTM_BIC_DIRECTORY_LCL
(
BIC_CODE VARCHAR2(11) , 
CUSTOMER_NO VARCHAR2(20) , 
SK_ARRANGEMENT VARCHAR2(1) DEFAULT 'N' , 
RELATIONSHIP VARCHAR2(1) DEFAULT 'N' , 
SWIFT_KEY VARCHAR2(50) , 
TELEX_KEY VARCHAR2(50) , 
MOD_NO NUMBER(4) , 
RECORD_STAT CHAR(1) , 
MAKER_ID VARCHAR2(12) , 
MAKER_DT_STAMP DATE , 
CHECKER_ID VARCHAR2(12) , 
CHECKER_DT_STAMP DATE , 
ONCE_AUTH CHAR(1) , 
AUTH_STAT CHAR(1)
)
/
CREATE OR REPLACE SYNONYM  ISTMS_BIC_DIRECTORY_LCL FOR ISTM_BIC_DIRECTORY_LCL
/
ALTER TABLE ISTM_BIC_DIRECTORY_LCL
ADD CONSTRAINT PK01_ISTM_BIC_DIRECTORY_LCL PRIMARY KEY(BIC_CODE)
/
DECLARE
  l_cnt_gbl NUMBER := 0;
  l_cnt_lcl NUMBER := 0;  
  l_cnt_tmp NUMBER := 0;    
  l_cnt_trigger NUMBER := 0; 
BEGIN
  BEGIN
    SELECT COUNT(1)
	INTO   l_cnt_trigger
    FROM   user_triggers 
	WHERE  trigger_name = 'ISTR_BIC_DIRECTORY';
	
	IF l_cnt_trigger > 1
	THEN
      EXECUTE IMMEDIATE 'ALTER TRIGGER ISTR_BIC_DIRECTORY DISABLE';
	END IF;
    dbms_output.put_line('Trigger ISTR_BIC_DIRECTORY disabled successfully');		  
  EXCEPTION
  WHEN OTHERS THEN
    dbms_output.put_line('Trigger not present or unable to disable'||SQLCODE);		    	  
  END;
  INSERT INTO istm_bic_directory_gbl
             (bic_code
             ,bank_name
             ,mod_no
             ,record_stat
             ,maker_id
             ,maker_dt_stamp
             ,checker_id
             ,checker_dt_stamp
             ,once_auth
             ,auth_stat
             ,bank_address1
             ,bank_address2
             ,bank_address3
             ,upload_flag
             ,upload_update
             ,gen_mt103
             ,blacklisted
             ,cug_member
             ,gen_mt103p
             ,multi_cust_transfer
             ,max_size
             ,remit_member
             ,sub_type_code
             ,gen_mt102p
             ,gen_mt101
             ,transaction_per_msg
             ,adb_member
             ,be_indicator
             ,branch_info
             ,pob_number
             ,street_addr_1
             ,street_addr_2
             ,street_addr_3
             ,street_addr_4
             ,city
             ,cps
             ,zip_code
             ,iso_country_code
			 )
     SELECT  bic_code
             ,bank_name
             ,mod_no
             ,record_stat
             ,maker_id
             ,maker_dt_stamp
             ,checker_id
             ,checker_dt_stamp
             ,once_auth
             ,auth_stat
             ,bank_address1
             ,bank_address2
             ,bank_address3
             ,upload_flag
             ,upload_update
             ,gen_mt103
             ,blacklisted
             ,cug_member
             ,gen_mt103p
             ,multi_cust_transfer
             ,max_size
             ,remit_member
             ,sub_type_code
             ,gen_mt102p
             ,gen_mt101
             ,transaction_per_msg
             ,adb_member
             ,be_indicator
             ,branch_info
             ,pob_number
             ,street_addr_1
             ,street_addr_2
             ,street_addr_3
             ,street_addr_4
             ,city
             ,cps
             ,zip_code
             ,iso_country_code
      FROM istm_bic_directory_tmp;
  SELECT Count(1) 
  INTO   l_cnt_gbl 
  FROM   istm_bic_directory_tmp;	  
  dbms_output.put_line('l_cnt_gbl ---->'||l_cnt_gbl);
  
  INSERT INTO istm_bic_directory_lcl
              (bic_code
               ,customer_no
               ,sk_arrangement
               ,relationship
               ,swift_key
               ,telex_key
               ,mod_no
               ,record_stat
               ,maker_id
               ,maker_dt_stamp
               ,checker_id
               ,checker_dt_stamp
               ,once_auth
               ,auth_stat
			  )
     SELECT  bic_code
              ,customer_no
              ,sk_arrangement
              ,relationship
              ,swift_key
              ,telex_key
              ,mod_no
              ,record_stat
              ,maker_id
              ,maker_dt_stamp
              ,checker_id
              ,checker_dt_stamp
              ,once_auth
              ,auth_stat
      FROM istm_bic_directory_tmp;	  
  
  SELECT Count(1) 
  INTO   l_cnt_lcl 
  FROM   istm_bic_directory_tmp;  
  dbms_output.put_line('l_cnt_lcl ---->'||l_cnt_lcl);	
  
  SELECT Count(1) 
  INTO   l_cnt_tmp 
  FROM   istm_bic_directory_tmp;   
  dbms_output.put_line('l_cnt_tmp ---->'||l_cnt_tmp);	
  
  IF l_cnt_gbl = l_cnt_lcl
  AND l_cnt_tmp = l_cnt_gbl
  THEN
    BEGIN
      EXECUTE IMMEDIATE 'drop table istm_bic_directory_tmp';
	  COMMIT;
      dbms_output.put_line('istm_bic_directory_tmp dropped successfully');		  
	EXCEPTION
	WHEN OTHERS THEN
      dbms_output.put_line('Trigger not present or unable to enable'||SQLCODE);		  	
	  ROLLBACK;
	END;
  ELSE
    ROLLBACK;
  END IF; 

  BEGIN
	IF l_cnt_trigger > 1
	THEN
      EXECUTE IMMEDIATE 'ALTER TRIGGER ISTR_BIC_DIRECTORY ENABLE';
	END IF;
    dbms_output.put_line('Trigger ISTR_BIC_DIRECTORY enabled successfully');		  
  EXCEPTION
  WHEN OTHERS THEN
    dbms_output.put_line('Trigger not present or unable to enable'||SQLCODE);		  
  END;  
EXCEPTION 
WHEN OTHERS THEN
  ROLLBACK;
END;
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( BRANCH_INFO VARCHAR2(70))
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( POB_NUMBER VARCHAR2(35))
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( CITY VARCHAR2(35))
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( CPS VARCHAR2(90))
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( ZIP_CODE VARCHAR2(15))
/
ALTER TABLE ISTM_CLEARING_CODE  ADD( ISO_COUNTRY_CODE VARCHAR2(2))
/
ALTER TABLE MSTM_SWIFT_TAGS  ADD( TAG_CHARSET CHAR(1))
/
ALTER TABLE STTM_CORE_ACCOUNT  MODIFY( MOD_NO NUMBER)
/
ALTER TABLE STTM_CORE_CUSTOMER  MODIFY( MOD_NO NUMBER)
/